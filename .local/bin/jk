#!/usr/bin/env python

import os
import glob
import argparse
import datetime
import shutil
import subprocess


TEMPLATE = """---
layout: post
title: {title}
---

"""


class NoMatchError(Exception):
    pass


def score(needle, match):
    needle_length = len(needle)
    match_length = len(match)

    penalty = 1. / match_length
    current_penalty = 0.0
    j = 0
    s = 0

    for i in range(match_length):
        if match[i] == needle[j]:
            s += 1.0

            # Don't penalize first occurence
            if j > 0:
                s -= current_penalty

            j += 1
            current_penalty = 0.0

            if j == needle_length:
                break
        else:
            current_penalty += penalty

    return s


def fuzzy_search(needle, haystack):
    scores = [(score(needle, normalize(h)), h) for h in haystack]
    try:
        return sorted(scores, key=lambda x: x[0], reverse=True)[0][1]
    except IndexError:
        raise NoMatchError


def get_title(path):
    return os.path.basename(path)[11:]


def normalize(path):
    return os.path.splitext(get_title(path))[0].replace('-', ' ')


def today_filename(dirname, hyphenated_title):
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    return os.path.join(dirname, '{}-{}'.format(today, hyphenated_title))


def make_md(dirname, title):
    filename = today_filename(dirname, title.lower().replace(' ', '-')) + '.md'

    with open(filename, 'w') as f:
        f.write(TEMPLATE.format(title=title))


def make_post(args):
    make_md('_posts', args.title)


def make_draft(args):
    make_md('_drafts', args.title)


def all_posts():
    return [fn for fn in glob.glob('_*/*.md')]


def switch(args):
    match = fuzzy_search(args.title, all_posts())
    target = '_drafts' if os.path.dirname(match) == '_posts' else '_posts'
    filename = today_filename(target, get_title(match))

    if os.path.exists('.git'):
        subprocess.call(['git', 'mv', match, filename]) 
    else:
        shutil.move(match, filename)

    print("Moved {} -> {}".format(match, filename))


def search(args):
    print(fuzzy_search(args.title, all_posts()))


def edit(args):
    match = fuzzy_search(args.title, all_posts())
    editor = os.environ.get('EDITOR', 'vim')
    subprocess.call([editor, match])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()    
    subparsers = parser.add_subparsers(title='Commands')

    commands = {
        'post': {'opts': {'help': 'Make new post'},
                 'defaults': {'func': make_post}},
        'draft': {'opts': {'help': 'Make new draft'},
                  'defaults': {'func': make_draft}},
        'switch': {'opts': {'help': 'Switch between post and draft'},
                  'defaults': {'func': switch}},
        'edit': {'opts': {'help': 'Edit post or draft'},
                 'defaults': {'func': edit}},
        'search': {'opts': {'help': 'Search for post and print out path'},
                   'defaults': {'func': search}},
    }

    for cmd in commands:
        cmd_parser = subparsers.add_parser(cmd, **commands[cmd]['opts'])
        cmd_parser.add_argument('title', nargs='+')
        cmd_parser.set_defaults(**commands[cmd]['defaults'])

    args = parser.parse_args()
    args.title = ' '.join(args.title)

    try:
        args.func(args)
    except NoMatchError:
        print("Couldn't find posts matching `{}'.".format(args.title))
